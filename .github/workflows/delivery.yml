# Automatic Versioning and Delivery
name: Delivery

on:
  push:
    branches:
      - wip-deploy
  workflow_dispatch:

env:
  REGISTRY: "registry.digitalocean.com/checkers-cr"
  IMAGE_NAME: "checkers"

jobs:
  frontend:
    uses: ./.github/workflows/frontend.yml
  gameservice:
    uses: ./.github/workflows/gameservice.yml
    secrets: inherit
  userservice:
    uses: ./.github/workflows/userservice.yml
    secrets: inherit

  getVersion:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.SemVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

  build_and_push:
    runs-on: ubuntu-latest
    needs: [ frontend, gameservice, userservice, getVersion ]
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2

      - name: Build container images
        run: docker-compose build
      
      - name: Tag container images
        run: |
          docker tag checkers_gameservice $(echo $REGISTRY)/$(echo $IMAGE_NAME):gameservice-${{ needs.getVersion.outputs.version }}
          docker tag checkers_userservice $(echo $REGISTRY)/$(echo $IMAGE_NAME):userservice-${{ needs.getVersion.outputs.version }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):gameservice-${{ needs.getVersion.outputs.version }}
          docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):userservice-${{ needs.getVersion.outputs.version }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push   
    steps:
      - uses: actions/checkout@v2
      - name: Copy file via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSHKEY }}
          passphrase: ${{ secrets.DO_PASSPHRASE }}
          source: "docker-compose.yml"
          target: "."
          
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSHKEY }}
          passphrase: ${{ secrets.DO_PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running containers
            docker stop userservice gameservice
            # Remove old containers
            docker rm userservice gameservice
            # Run new containers from new images
            docker pull $(echo $REGISTRY)/$(echo $IMAGE_NAME):gameservice-${{ needs.getVersion.outputs.version }}
            docker pull $(echo $REGISTRY)/$(echo $IMAGE_NAME):userservice-${{ needs.getVersion.outputs.version }}
            docker compose up -d